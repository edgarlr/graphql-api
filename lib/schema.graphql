"Students level validation"
enum Level {
  beginner
  intermediate
  advanced
}

union GlobalSearch = Course | Student | Monitor

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  students: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Return all courses"
  allCourses: [Course]
  "Return one course"
  course(id: ID!): Course
  "Return all students"
  allPeople: [Person]
  "Return one students"
  person(id: ID!): Person
  "Exacute a global search"
  searchItems(keyword: String!): [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Create a new course"
  createCourse(input: CourseInput!): Course
  "Edit one course"
  editCourse(_id: ID!, input: CourseEditInput!): Course
  "Delete a course"
  deleteCourse(_id: ID!): Boolean
  "Create a new student"
  createPerson(input: PersonInput!): Person
  "Edit one person"
  editPerson(_id: ID!, input: PersonEditInput!): Person
  "Delete a person"
  deletePerson(_id: ID!): Boolean
  "Add a person in a course"
  addPerson(courseID: ID!, studentID: ID!): Course

}